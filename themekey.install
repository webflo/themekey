<?php
// $Id$

/**
 * Implementation of hook_schema().
 */
function themekey_schema() {
  $schema = array();
  $schema['themekey_paths'] = array(
    'fields' => array(
      'id'            => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'path'          => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'fit'           => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'weight'        => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'wildcards'     => array('type' => 'text', 'not null' => TRUE, 'size' => 'big', 'serialize' => TRUE),
      'callbacks'     => array('type' => 'text', 'not null' => TRUE, 'size' => 'big', 'serialize' => TRUE)
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'path'        => array('path'),
      'fit'         => array('fit'),
      'weight'      => array('weight'),
      'custom'      => array('custom')
    )
  );
  $schema['themekey_properties'] = array(
    'fields' => array(
      'id'            => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
      'property'      => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'value'         => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'weight'        => array('type' => 'int', 'not null' => TRUE, 'default' => 0),
      'conditions'    => array('type' => 'text', 'not null' => TRUE, 'size' => 'big', 'serialize' => TRUE),
      'theme'         => array('type' => 'varchar', 'length' => 255, 'not null' => TRUE, 'default' => ''),
      'enabled'       => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0),
      'wildcards'     => array('type' => 'text', 'not null' => TRUE, 'size' => 'big', 'serialize' => TRUE),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'enabled'  => array('enabled'),
      'weight'   => array('weight'),
    )
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function themekey_install() {
  drupal_install_schema('themekey');
}

/**
 * Implementation of hook_uninstall().
 */
function themekey_uninstall() {
  // Drop tables
  drupal_uninstall_schema('themekey');
  // Remove variables
  db_query("DELETE FROM {variable} WHERE name LIKE 'themekey_%'");
  cache_clear_all('variables', 'cache');
}

/**
 * Implementation of hook_update_N().
 * (Update property 'nid' to 'node:nid')
 */
function themekey_update_6001() {
  $ret = array();
  //
  $result = db_query('SELECT * FROM {themekey_properties} WHERE property = \'nid\'');
  while ($item = db_fetch_array($result)) {
    if (db_result(db_query('SELECT COUNT(id) FROM {themekey_properties} WHERE property = \'node:nid\' AND value = \'%s\'', $item['value'])) > 0) {
      $ret[] = update_sql('DELETE FROM {themekey_properties} WHERE id = '. $item['id']);
    }
    else {
      $ret[] = update_sql('UPDATE {themekey_properties} SET property = \'node:nid\' WHERE id = '. $item['id']);
    }
  }

  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function themekey_update_6100() {

  $properties = variable_get('themekey_properties', array());

  foreach ($properties as $key => &$property) {
    if (array_key_exists('path', $property) && $key === $property['path']) {
      $property['path'] = FALSE;
    }
  }

  variable_set('themekey_properties', $properties);

  return array();
}


/**
 * Implementation of hook_update_N().
 */
function themekey_update_6101() {
  $result = update_sql("UPDATE {system} SET weight = 0 WHERE name = 'themekey'");
  return array($result);
}


/**
 * Implementation of hook_update_N().
 */
function themekey_update_6102() {
  if (module_exists('forum')) {
    variable_set('themekey_module_forum_triggers_taxonomy_vid', 1);
  }

  if (module_exists('taxonomy_menu')) {
    variable_set('themekey_module_taxonomy_menu_triggers_taxonomy_tid', 1);
  }

  return array();
}


/**
 * Implementation of hook_update_N().
 */
function themekey_update_6103() {
  variable_del('themekey_nodediscover');
  return array();
}


/**
 * Implementation of hook_update_N().
 */
function themekey_update_6104() {
  $result = update_sql("ALTER TABLE {themekey_properties} DROP COLUMN callbacks");
  return array($result);
}


/**
 * Implementation of hook_update_N().
 */
function themekey_update_6200() {
  $ret[] = update_sql("ALTER TABLE {themekey_properties} ADD COLUMN enabled INT(11) NOT NULL DEFAULT 0");
  $ret[] = update_sql("ALTER TABLE {themekey_properties} DROP INDEX property");
  $ret[] = update_sql("ALTER TABLE {themekey_properties} ADD INDEX (enabled)");
  $ret[] = update_sql("ALTER TABLE {themekey_properties} ADD COLUMN wildcards TEXT NOT NULL");

  $weight = ((int) db_result(db_query("SELECT MIN(weight) FROM {themekey_properties}"))) - 1;
  $insert_query = "INSERT INTO {themekey_properties} (property, value, weight, conditions, theme, enabled, wildcards) VALUES ('drupal:path', '%s', %d, '%s', '%s', 1, '%s')";

  $result = db_query("SELECT * FROM {themekey_paths} WHERE custom = 1");
  while ($item = db_fetch_array($result)) {
    $insert_success = db_query($insert_query, $item['path'], $weight, $item['conditions'], $item['theme'], $item['wildcards']);
    $ret[] = array('success' => $insert_success, 'query' => $insert_query);
    $ret[] = update_sql('DELETE FROM {themekey_paths} WHERE id = '. $item['id']);
  }

  $ret[] = update_sql("ALTER TABLE {themekey_paths} DROP COLUMN conditions");
  $ret[] = update_sql("ALTER TABLE {themekey_paths} DROP COLUMN custom");
  $ret[] = update_sql("ALTER TABLE {themekey_paths} DROP COLUMN theme");

  drupal_set_message(t('Please review ThemeKey Settings at !link', array('!link' => l('admin/settings/themekey/settings', 'admin/settings/themekey/settings'))), 'warning');

  return $ret;
}

/**
 * Implementation of hook_update_N().
 */
function themekey_update_6201() {
  _themekey_rebuild();
  return array();
}
